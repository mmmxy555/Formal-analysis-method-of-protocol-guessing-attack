theory SPAKE begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: Hash/5, fst/1, invmul/2, mul/2, pair/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    invmul(mul(a, b), a) = b,
    invmul(mul(a, b), b) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Password_init:
   [ Fr( ~pw ) ] --[ Init_pw_once( ) ]-> [ !Own( ~pw ) ]

rule (modulo E) A_1:
   [ !Own( pw ), Fr( ~x ) ]
  -->
   [
   Out( <$A, mul('g'^~x, 'M'^pw)> ),
   A_1_finish( $A, $B, ~x, mul('g'^~x, 'M'^pw), pw )
   ]

rule (modulo E) B_1:
   [ !Own( pw ), Fr( ~y ), In( <$A, C1> ) ]
  -->
   [
   Out( <$B, mul('g'^~y, 'N'^pw)> ),
   SK_B( Hash($A, $B, C1, mul('g'^~y, 'N'^pw), invmul(C1, 'M'^pw)^~y) )
   ]

rule (modulo E) A_2:
   [ In( <$B, C2> ), A_1_finish( $A, $B, x, C1, pw ) ]
  --[ Finish_A( pw, Hash($A, $B, C1, C2, invmul(C2, 'N'^pw)^x) ) ]->
   [ SK_A( Hash($A, $B, C1, C2, invmul(C2, 'N'^pw)^x) ) ]

rule (modulo E) Verif:
   [ SK_A( SK_A ), SK_B( SK_B ) ] --[ Eq( SK_A, SK_B ), Finish( ) ]-> [ ]

rule (modulo E) Password_guess:
   [ !Own( pw ), Fr( ~rc ), Finish( ) ]
  --[ Guess_once( ) ]->
   [ Out( diff(pw, ~rc) ) ]

restriction Verif [right]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Verif [left]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Init [right]:
  "∀ #i #j. ((Init_pw_once( ) @ #i) ∧ (Init_pw_once( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Init [left]:
  "∀ #i #j. ((Init_pw_once( ) @ #i) ∧ (Init_pw_once( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction guess [right]:
  "∀ #i #j. ((Guess_once( ) @ #i) ∧ (Guess_once( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction guess [left]:
  "∀ #i #j. ((Guess_once( ) @ #i) ∧ (Guess_once( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_A_1
  backward-search
    case LHS
    step( simplify )
    step( solve( !Own( pw ) ▶₀ #i ) )
      case Password_init
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Own( pw ) ▶₀ #i ) )
      case Password_init
      MIRRORED
    qed
  qed
next
  case Rule_A_2
  backward-search
    case LHS
    step( simplify )
    step( solve( A_1_finish( $A, $B, x, C1, pw ) ▶₁ #i ) )
      case A_1
      step( solve( !KU( $B ) @ #vk.1 ) )
        case coerce
        step( solve( !KD( $B ) ▶₀ #vk.1 ) )
          case A_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case B_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case Password_guess
          step( solve( !Own( t ) ▶₀ #vr.2 ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case pub
        step( solve( splitEqs(0) ) )
          case split_case_01
          step( solve( !KU( mul(x, 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_02
          step( solve( !KU( mul('N'^~pw, x) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_03
          step( solve( !KU( mul(x^x.1, 'N'^~pw) ) @ #vk.2 ) )
            case B_1
            step( solve( !KU( $A.1 ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( $A.1 ) ▶₀ #vk.4 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                step( solve( !Own( t ) ▶₀ #vr.4 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case pub
              step( solve( splitEqs(2) ) )
                case split_case_01
                MIRRORED
              next
                case split_case_02
                step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( z^inv(~y) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_03
                step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( z^inv(~y) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( mul(x.1, 'M'^~pw) ) @ #vk.5 ) )
                  case A_1
                  MIRRORED
                next
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( mul('M'^~pw, x.1) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( mul(x.1^x.2, 'M'^~pw) ) @ #vk.5 ) )
                  case A_1
                  MIRRORED
                next
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.3 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_07
                step( solve( !KU( mul('M'^~pw, x.1^x.2) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.3 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_08
                step( solve( !KU( mul(x.1^inv((~y*x.2)), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^inv((~y*x.2)) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  qed
                qed
              next
                case split_case_09
                step( solve( !KU( mul(x.1^(x.2*inv(~y)), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv(~y)) ) @ #vk.6 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  qed
                qed
              next
                case split_case_10
                step( solve( !KU( mul('M'^~pw, x.1^inv((~y*x.2))) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( x.1^inv((~y*x.2)) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( mul('M'^~pw, x.1^(x.2*inv(~y))) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv(~y)) ) @ #vk.7 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  qed
                qed
              next
                case split_case_12
                step( solve( !KU( mul(x.1^(x.2*inv((~y*x.3))), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv((~y*x.3))) ) @ #vk.6 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  qed
                qed
              next
                case split_case_13
                step( solve( !KU( mul('M'^~pw, x.1^(x.2*inv((~y*x.3)))) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv((~y*x.3))) ) @ #vk.7 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  qed
                qed
              qed
            qed
          next
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( mul(x^(x.1*inv(~x.2)), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~x.2)) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.11 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( mul('N'^~pw, x^x.1) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( mul('N'^~pw, x^(x.1*inv(~x.2))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~x.2)) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.11 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( mul(x^inv((~x.1*x.2)), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^inv((~x.1*x.2)) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
            qed
          qed
        next
          case split_case_08
          MIRRORED
        next
          case split_case_09
          step( solve( !KU( mul('N'^~pw, z^inv(~x)) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( z^inv(~x) ) @ #vk.5 ) )
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.11 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( mul('N'^~pw, x^inv((~x.1*x.2))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( x^inv((~x.1*x.2)) ) @ #vk.5 ) )
                case c_exp
                by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( mul(z^inv(~x), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( z^inv(~x) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~x ) @ #vk.7 ) )
            qed
          qed
        next
          case split_case_12
          step( solve( !KU( mul(x^(x.1*inv((~x.2*x.3))), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~x.2*x.3))) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( mul('N'^~pw, x^(x.1*inv((~x.2*x.3)))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~x.2*x.3))) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( A_1_finish( $A, $B, x, C1, pw ) ▶₁ #i ) )
      case A_1
      step( solve( !KU( $B ) @ #vk.1 ) )
        case coerce
        step( solve( !KD( $B ) ▶₀ #vk.1 ) )
          case A_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case B_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case Password_guess
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pub
        step( solve( splitEqs(0) ) )
          case split_case_01
          step( solve( !KU( mul(x, 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_02
          step( solve( !KU( mul('N'^~pw, x) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_03
          step( solve( !KU( mul(x^x.1, 'N'^~pw) ) @ #vk.2 ) )
            case B_1
            step( solve( !KU( $A.1 ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( $A.1 ) ▶₀ #vk.4 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( splitEqs(2) ) )
                case split_case_01
                MIRRORED
              next
                case split_case_02
                step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( z^inv(~y) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_03
                step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( z^inv(~y) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( mul(x.1, 'M'^~pw) ) @ #vk.5 ) )
                  case A_1
                  MIRRORED
                next
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( mul('M'^~pw, x.1) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( mul(x.1^x.2, 'M'^~pw) ) @ #vk.5 ) )
                  case A_1
                  MIRRORED
                next
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.3 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_07
                step( solve( !KU( mul('M'^~pw, x.1^x.2) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.3 ) @ #vk.8 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_08
                step( solve( !KU( mul(x.1^inv((~y*x.2)), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^inv((~y*x.2)) ) @ #vk.6 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  qed
                qed
              next
                case split_case_09
                step( solve( !KU( mul(x.1^(x.2*inv(~y)), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv(~y)) ) @ #vk.6 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  qed
                qed
              next
                case split_case_10
                step( solve( !KU( mul('M'^~pw, x.1^inv((~y*x.2))) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                    case A_1
                    step( solve( !KU( x.1^inv((~y*x.2)) ) @ #vk.7 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( mul('M'^~pw, x.1^(x.2*inv(~y))) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv(~y)) ) @ #vk.7 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.15 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  qed
                qed
              next
                case split_case_12
                step( solve( !KU( mul(x.1^(x.2*inv((~y*x.3))), 'M'^~pw) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv((~y*x.3))) ) @ #vk.6 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  qed
                qed
              next
                case split_case_13
                step( solve( !KU( mul('M'^~pw, x.1^(x.2*inv((~y*x.3)))) ) @ #vk.5 ) )
                  case c_mul
                  step( solve( !KU( x.1^(x.2*inv((~y*x.3))) ) @ #vk.7 ) )
                    case A_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.11 ) )
                  next
                    case A_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  next
                    case A_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.10 ) )
                  next
                    case A_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.12 ) )
                  next
                    case B_1_case_1
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_2
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case B_1_case_3
                    by step( solve( !KU( ~y ) @ #vk.14 ) )
                  next
                    case B_1_case_4
                    by step( solve( !KU( ~y ) @ #vk.16 ) )
                  next
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.13 ) )
                  qed
                qed
              qed
            qed
          next
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( mul(x^(x.1*inv(~x.2)), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~x.2)) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.11 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( mul('N'^~pw, x^x.1) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( 'g'^~y ) @ #vk.8 ) )
                case B_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.10 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( mul('N'^~pw, x^(x.1*inv(~x.2))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~x.2)) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.9 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.11 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( mul(x^inv((~x.1*x.2)), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^inv((~x.1*x.2)) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
            qed
          qed
        next
          case split_case_08
          MIRRORED
        next
          case split_case_09
          step( solve( !KU( mul('N'^~pw, z^inv(~x)) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( z^inv(~x) ) @ #vk.5 ) )
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.11 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( mul('N'^~pw, x^inv((~x.1*x.2))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'N'^~pw ) @ #vk.3 ) )
              case B_1
              step( solve( !KU( x^inv((~x.1*x.2)) ) @ #vk.5 ) )
                case c_exp
                by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( mul(z^inv(~x), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( z^inv(~x) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~x ) @ #vk.7 ) )
            qed
          qed
        next
          case split_case_12
          step( solve( !KU( mul(x^(x.1*inv((~x.2*x.3))), 'N'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~x.2*x.3))) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( mul('N'^~pw, x^(x.1*inv((~x.2*x.3)))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~x.2*x.3))) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~x ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~x ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~x.1 ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~x.1 ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_B_1
  backward-search
    case LHS
    step( simplify )
    step( solve( !Own( pw ) ▶₀ #i ) )
      case Password_init
      step( solve( !KU( $A ) @ #vk.1 ) )
        case coerce
        step( solve( !KD( $A ) ▶₀ #vk.1 ) )
          case A_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.1 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case B_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.1 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case Password_guess
          step( solve( !Own( t ) ▶₀ #vr.1 ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case pub
        step( solve( splitEqs(0) ) )
          case split_case_01
          MIRRORED
        next
          case split_case_02
          step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.8 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_03
          step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( z^inv(~y) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.2 ) )
            case A_1
            MIRRORED
          next
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
              case A_1
              step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( mul('M'^~pw, x) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.2 ) )
            case A_1
            MIRRORED
          next
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
              case A_1
              step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            qed
          qed
        next
          case split_case_09
          step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.6 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.9 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.6 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_12
          step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Own( pw ) ▶₀ #i ) )
      case Password_init
      step( solve( !KU( $A ) @ #vk.1 ) )
        case coerce
        step( solve( !KD( $A ) ▶₀ #vk.1 ) )
          case A_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.1 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case B_1
          step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              case d_0_invmul_case_1
              step( solve( !Own( pw.1 ) ▶₀ #vr.1 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            next
              case d_0_invmul_case_2
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case Password_guess
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pub
        step( solve( splitEqs(0) ) )
          case split_case_01
          MIRRORED
        next
          case split_case_02
          step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.8 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_03
          step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( z^inv(~y) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.2 ) )
            case A_1
            MIRRORED
          next
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
              case A_1
              step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( mul('M'^~pw, x) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.2 ) )
            case A_1
            MIRRORED
          next
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
              case A_1
              step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                case A_1
                by step( contradiction /* cyclic */ )
              next
                case c_exp
                by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.3 ) )
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            qed
          qed
        next
          case split_case_09
          step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.6 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
              case A_1
              step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.9 ) )
              qed
            next
              case c_exp
              by step( solve( !KU( ~pw ) @ #vk.6 ) )
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.6 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.12 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            qed
          qed
        next
          case split_case_12
          step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.3 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.2 ) )
            case c_mul
            step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
              case A_1_case_1
              by step( solve( !KU( ~y ) @ #vk.8 ) )
            next
              case A_1_case_2
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            next
              case A_1_case_3
              by step( solve( !KU( ~y ) @ #vk.7 ) )
            next
              case A_1_case_4
              by step( solve( !KU( ~y ) @ #vk.9 ) )
            next
              case B_1_case_1
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_2
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case B_1_case_3
              by step( solve( !KU( ~y ) @ #vk.11 ) )
            next
              case B_1_case_4
              by step( solve( !KU( ~y ) @ #vk.13 ) )
            next
              case c_exp
              by step( solve( !KU( ~y ) @ #vk.10 ) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          MIRRORED
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.1 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              step( solve( !Own( t ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case pub
            step( solve( splitEqs(0) ) )
              case split_case_01
              MIRRORED
            next
              case split_case_02
              step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.8 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_03
              step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( z^inv(~y) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            next
              case split_case_04
              step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_05
              step( solve( !KU( mul('M'^~pw, x) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_06
              step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_07
              step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_08
              step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                qed
              qed
            next
              case split_case_09
              step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_10
              step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_11
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_12
              step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            next
              case split_case_13
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Password_guess
      step( solve( !Own( t ) ▶₀ #vr ) )
        case Password_init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          MIRRORED
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.1 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( splitEqs(0) ) )
              case split_case_01
              MIRRORED
            next
              case split_case_02
              step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.8 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_03
              step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( z^inv(~y) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            next
              case split_case_04
              step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_05
              step( solve( !KU( mul('M'^~pw, x) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_06
              step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_07
              step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_08
              step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                qed
              qed
            next
              case split_case_09
              step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_10
              step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_11
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_12
              step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            next
              case split_case_13
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Password_guess
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_invmul
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_0_invmul( ) @ #i ) )
      case d_0_invmul_case_1
      step( solve( !KD( mul(a, b) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'g'^~x ) @ #vk ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.2 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.3 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.2 ) )
              qed
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'g'^~y ) @ #vk.1 ) )
                case B_1
                step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.5 ) )
              qed
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_0_invmul_case_2
      step( solve( !KD( mul(a, b) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'M'^~pw ) @ #vk ) )
                case A_1
                step( solve( !KU( 'g'^~x.1 ) @ #vk.1 ) )
                  case A_1
                  MIRRORED
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.3 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.2 ) )
              qed
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'N'^~pw ) @ #vk.1 ) )
                case B_1
                step( solve( !KU( 'g'^~y.1 ) @ #vk.7 ) )
                  case B_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_exp
                  by step( solve( !KU( ~y.1 ) @ #vk.9 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.5 ) )
              qed
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_0_invmul( ) @ #i ) )
      case d_0_invmul_case_1
      step( solve( !KD( mul(a, b) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'g'^~x ) @ #vk ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.2 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.3 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.2 ) )
              qed
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'g'^~y ) @ #vk.1 ) )
                case B_1
                step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.5 ) )
              qed
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_0_invmul_case_2
      step( solve( !KD( mul(a, b) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'M'^~pw ) @ #vk ) )
                case A_1
                step( solve( !KU( 'g'^~x.1 ) @ #vk.1 ) )
                  case A_1
                  MIRRORED
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.3 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.2 ) )
              qed
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          next
            case d_0_invmul_case_2
            by step( contradiction /* impossible chain */ )
          next
            case mul
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'N'^~pw ) @ #vk.1 ) )
                case B_1
                step( solve( !KU( 'g'^~y.1 ) @ #vk.7 ) )
                  case B_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_exp
                  by step( solve( !KU( ~y.1 ) @ #vk.9 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.5 ) )
              qed
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          MIRRORED
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.1 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              step( solve( !Own( t ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case pub
            step( solve( splitEqs(0) ) )
              case split_case_01
              MIRRORED
            next
              case split_case_02
              step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.8 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_03
              step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( z^inv(~y) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            next
              case split_case_04
              step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_05
              step( solve( !KU( mul('M'^~pw, x) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_06
              step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_07
              step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_08
              step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                qed
              qed
            next
              case split_case_09
              step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_10
              step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_11
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_12
              step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            next
              case split_case_13
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Password_guess
      step( solve( !Own( t ) ▶₀ #vr ) )
        case Password_init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          MIRRORED
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.1 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( splitEqs(0) ) )
              case split_case_01
              MIRRORED
            next
              case split_case_02
              step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.8 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_03
              step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( z^inv(~y) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            next
              case split_case_04
              step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_05
              step( solve( !KU( mul('M'^~pw, x) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_06
              step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.2 ) )
                case A_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_07
              step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.5 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_08
              step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.3 ) )
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                qed
              qed
            next
              case split_case_09
              step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_10
              step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                  case A_1
                  step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                    case c_exp
                    by step( solve( !KU( ~y ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            next
              case split_case_11
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.12 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case split_case_12
              step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.3 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            next
              case split_case_13
              step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.2 ) )
                case c_mul
                step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                  case A_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.8 ) )
                next
                  case A_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                next
                  case A_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                next
                  case A_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                next
                  case B_1_case_1
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_2
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case B_1_case_3
                  by step( solve( !KU( ~y ) @ #vk.11 ) )
                next
                  case B_1_case_4
                  by step( solve( !KU( ~y ) @ #vk.13 ) )
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.10 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Password_guess
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_exp
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_exp( ) @ #i ) )
      case d_exp_case_01
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( 'g'^~x.1 ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'M'^~pw ) @ #vk.2 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.3 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.2 ) @ #vk.5 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.3 ) )
                qed
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.2 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.3 ) )
                qed
              qed
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.5 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.9 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.11 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                qed
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_02
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_03
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_04
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_05
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_06
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_07
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_08
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_09
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_10
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_11
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_12
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_13
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_14
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_15
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_16
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_17
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_18
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_19
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_20
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_21
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_22
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_23
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_24
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_25
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_26
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_27
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_28
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_29
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_30
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_31
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_32
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_33
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_34
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_35
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_36
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_37
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_38
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_39
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_40
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_41
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_42
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_43
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_44
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case d_exp_case_45
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        step( solve( !Own( t ) ▶₀ #vr ) )
          case Password_init
          by step( contradiction /* impossible chain */ )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_exp( ) @ #i ) )
      case d_exp_case_01
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( 'g'^~x.1 ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'M'^~pw ) @ #vk.2 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.3 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.2 ) @ #vk.5 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.3 ) )
                qed
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.2 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.3 ) )
                qed
              qed
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.5 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.9 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.11 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.6 ) )
                qed
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              qed
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_02
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_03
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_04
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_05
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_06
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_07
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_08
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_09
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_10
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_11
      step( solve( !KD( x^inv(x.1) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_12
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_13
      step( solve( !KD( x^x.1 ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case exp
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_14
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_15
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_16
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_17
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_18
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_19
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_20
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_21
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_22
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_23
      step( solve( !KD( x^(x.1*x.2) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_24
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_25
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_26
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_27
      step( solve( !KD( x^inv((x.1*x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_28
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_29
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_30
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_31
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_32
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_33
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_34
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_35
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_36
      step( solve( !KD( x^(x.1*inv(x.2)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_37
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_38
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_39
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_40
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_41
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_42
      step( solve( !KD( x^(x.1*x.2*inv(x.3)) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_43
      step( solve( !KD( x^(x.1*inv((x.2*x.3))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_44
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    next
      case d_exp_case_45
      step( solve( !KD( x^(x.1*x.2*inv((x.3*x.4))) ) ▶₀ #i ) )
        case A_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case B_1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_invmul_case_1
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
                case d_exp_case_1
                by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              next
                case d_exp_case_2
                by step( contradiction /* impossible chain */ )
              next
                case d_exp_case_3
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_4
                by step( contradiction /* non-normal exponentiation rule instance */ )
              next
                case d_exp_case_5
                by step( contradiction /* non-normal exponentiation rule instance */ )
              qed
            qed
          next
            case d_0_invmul_case_2
            step( solve( (#vr.2, 0) ~~> (#i, 0) ) )
              case d_exp_case_1
              by step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
            next
              case d_exp_case_2
              by step( contradiction /* impossible chain */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            qed
          qed
        qed
      next
        case Password_guess
        by step( contradiction /* impossible chain */ )
      qed
    qed
  qed
next
  case Rule_Destrd_inv
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( inv(x) ) ▶₀ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Password_guess
      step( solve( !Own( t ) ▶₀ #vr ) )
        case Password_init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( inv(x) ) ▶₀ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            by step( contradiction /* impossible chain */ )
          qed
        next
          case d_0_invmul_case_2
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Password_guess
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_pub_A
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( $A ) @ #vk ) )
              case coerce
              step( solve( !KD( $A ) ▶₀ #vk ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                step( solve( !Own( t ) ▶₀ #vr.3 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_exp_case_1
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case exp
                step( solve( !KU( 'g'^~x.1 ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.4 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.5 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                qed
              qed
            next
              case d_exp_case_2
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !KU( 'g'^~x ) @ #vk.1 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.2 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.3 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.3 ) )
              qed
            qed
          qed
        next
          case d_0_invmul_case_2
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.3 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.5 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.4 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                case A_1
                step( solve( !KU( 'g'^~x.1 ) @ #vk.2 ) )
                  case A_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.3 ) )
              qed
            qed
          qed
        next
          case mul
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( mul('g'^~x, 'M'^~pw) ) @ #vk ) )
              case A_1
              MIRRORED
            next
              case c_mul
              step( solve( !KU( 'g'^~x ) @ #vk.1 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.2 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.4 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.4 ) )
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.1 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              step( solve( !Own( t ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case pub
            step( solve( !KU( mul('g'^~x, 'M'^~pw) ) @ #vk.2 ) )
              case A_1
              MIRRORED
            next
              case c_mul
              step( solve( !KU( 'g'^~x ) @ #vk.3 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.6 ) )
              qed
            qed
          qed
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_pub_B
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( $A ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $A ) ▶₀ #vk.1 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                step( solve( !Own( t ) ▶₀ #vr.3 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case pub
              step( solve( !KU( $B ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( $B ) ▶₀ #vk.2 ) )
                  case A_1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      case d_0_invmul_case_1
                      step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                        case Password_init
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_invmul_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case B_1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      case d_0_invmul_case_1
                      step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                        case Password_init
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_invmul_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Password_guess
                  step( solve( !Own( t ) ▶₀ #vr.3 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( splitEqs(0) ) )
                  case split_case_01
                  MIRRORED
                next
                  case split_case_02
                  step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( z^inv(~y) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.9 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( mul('M'^~pw, x) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_11
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_12
                  step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case split_case_13
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_exp_case_1
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case exp
                step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.6 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.10 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.12 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.8 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            next
              case d_exp_case_2
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                case B_1
                step( solve( !KU( 'N'^~pw ) @ #vk.2 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.6 ) )
              qed
            qed
          qed
        next
          case d_0_invmul_case_2
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.9 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.11 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.7 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                case B_1
                step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                  case B_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_exp
                  by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.6 ) )
              qed
            qed
          qed
        next
          case mul
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( $A ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $A ) ▶₀ #vk.1 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                step( solve( !Own( t ) ▶₀ #vr.3 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case pub
              step( solve( !KU( mul('g'^~y, 'N'^~pw) ) @ #vk.2 ) )
                case B_1
                step( solve( splitEqs(0) ) )
                  case split_case_01
                  MIRRORED
                next
                  case split_case_02
                  step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( z^inv(~y) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.9 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( mul('M'^~pw, x) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_11
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_12
                  step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case split_case_13
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                qed
              next
                case c_mul
                step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.5 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.9 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.11 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.2 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              step( solve( !Own( t ) ▶₀ #vr.2 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case pub
            step( solve( !KU( $B ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( $B ) ▶₀ #vk.3 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                step( solve( !Own( t ) ▶₀ #vr.2 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case pub
              step( solve( !KU( mul('g'^~y, 'N'^~pw) ) @ #vk.5 ) )
                case B_1
                step( solve( splitEqs(0) ) )
                  case split_case_01
                  MIRRORED
                next
                  case split_case_02
                  step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( z^inv(~y) ) @ #vk.7 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.11 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( z^inv(~y) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.5 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( mul('M'^~pw, x) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.5 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.6 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.12 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_11
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case split_case_12
                  step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.6 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    qed
                  qed
                next
                  case split_case_13
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    qed
                  qed
                qed
              next
                case c_mul
                step( solve( !KU( 'g'^~y ) @ #vk.6 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.7 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.11 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.13 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Password_guess
      step( solve( !Own( t ) ▶₀ #vr ) )
        case Password_init
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case Var_fresh_pw
          by step( solve( Finish( ) ▶₂ #vr ) )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case A_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_pub_A
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( $A ) @ #vk ) )
              case coerce
              step( solve( !KD( $A ) ▶₀ #vk ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_exp_case_1
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case exp
                step( solve( !KU( 'g'^~x.1 ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'M'^~pw ) @ #vk.3 ) )
                    case A_1
                    step( solve( !KU( 'g'^~x.2 ) @ #vk.4 ) )
                      case A_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.5 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                qed
              qed
            next
              case d_exp_case_2
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !KU( 'g'^~x ) @ #vk.1 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.2 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.3 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.3 ) )
              qed
            qed
          qed
        next
          case d_0_invmul_case_2
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.2 ) @ #vk.3 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.2 ) @ #vk.5 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.4 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'M'^~pw ) @ #vk.1 ) )
                case A_1
                step( solve( !KU( 'g'^~x.1 ) @ #vk.2 ) )
                  case A_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_exp
                  by step( solve( !KU( ~x.1 ) @ #vk.4 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.3 ) )
              qed
            qed
          qed
        next
          case mul
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( mul('g'^~x, 'M'^~pw) ) @ #vk ) )
              case A_1
              MIRRORED
            next
              case c_mul
              step( solve( !KU( 'g'^~x ) @ #vk.1 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.2 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.5 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.4 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.4 ) )
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.1 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( mul('g'^~x, 'M'^~pw) ) @ #vk.2 ) )
              case A_1
              MIRRORED
            next
              case c_mul
              step( solve( !KU( 'g'^~x ) @ #vk.3 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.5 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.6 ) )
              qed
            qed
          qed
        qed
      qed
    next
      case B_1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_pub_B
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( $A ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $A ) ▶₀ #vk.1 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( $B ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( $B ) ▶₀ #vk.2 ) )
                  case A_1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      case d_0_invmul_case_1
                      step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                        case Password_init
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_invmul_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case B_1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      case d_0_invmul_case_1
                      step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                        case Password_init
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_invmul_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Password_guess
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case pub
                step( solve( splitEqs(0) ) )
                  case split_case_01
                  MIRRORED
                next
                  case split_case_02
                  step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( z^inv(~y) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.9 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( mul('M'^~pw, x) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_11
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_12
                  step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case split_case_13
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case d_0_invmul_case_1
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
              case d_exp_case_1
              step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
                case exp
                step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.6 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.10 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.12 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.8 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            next
              case d_exp_case_2
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_3
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_4
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case d_exp_case_5
              by step( contradiction /* non-normal exponentiation rule instance */ )
            next
              case exp
              step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                case B_1
                step( solve( !KU( 'N'^~pw ) @ #vk.2 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.6 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~y ) @ #vk.6 ) )
              qed
            qed
          qed
        next
          case d_0_invmul_case_2
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case d_exp_case_1
            step( solve( (#vr.3, 0) ~~> (#i, 1) ) )
              case exp
              step( solve( !Own( pw ) ▶₀ #vr ) )
                case Password_init
                step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'g'^~y.1 ) @ #vk.9 ) )
                    case B_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~y.1 ) @ #vk.11 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.7 ) )
                qed
              qed
            qed
          next
            case d_exp_case_2
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_3
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_4
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case d_exp_case_5
            by step( contradiction /* non-normal exponentiation rule instance */ )
          next
            case exp
            step( solve( !Own( pw ) ▶₀ #vr ) )
              case Password_init
              step( solve( !KU( 'N'^~pw ) @ #vk.4 ) )
                case B_1
                step( solve( !KU( 'g'^~y.1 ) @ #vk.8 ) )
                  case B_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_exp
                  by step( solve( !KU( ~y.1 ) @ #vk.10 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~pw ) @ #vk.6 ) )
              qed
            qed
          qed
        next
          case mul
          step( solve( !Own( pw ) ▶₀ #vr ) )
            case Password_init
            step( solve( !KU( $A ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( $A ) ▶₀ #vk.1 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.3 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( mul('g'^~y, 'N'^~pw) ) @ #vk.2 ) )
                case B_1
                step( solve( splitEqs(0) ) )
                  case split_case_01
                  MIRRORED
                next
                  case split_case_02
                  step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( z^inv(~y) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.9 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( z^inv(~y) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( mul('M'^~pw, x) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.3 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.5 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.6 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.8 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.4 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.4 ) )
                      case A_1
                      step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case split_case_11
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.7 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_12
                  step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.4 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case split_case_13
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.3 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.8 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                qed
              next
                case c_mul
                step( solve( !KU( 'g'^~y ) @ #vk.4 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.5 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.9 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.11 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.7 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.7 ) )
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          step( solve( !KU( $A ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.2 ) )
              case A_1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( $B ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( $B ) ▶₀ #vk.3 ) )
                case A_1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case B_1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                    case d_0_invmul_case_1
                    step( solve( !Own( pw.1 ) ▶₀ #vr.2 ) )
                      case Password_init
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case d_0_invmul_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case Password_guess
                by step( contradiction /* impossible chain */ )
              qed
            next
              case pub
              step( solve( !KU( mul('g'^~y, 'N'^~pw) ) @ #vk.5 ) )
                case B_1
                step( solve( splitEqs(0) ) )
                  case split_case_01
                  MIRRORED
                next
                  case split_case_02
                  step( solve( !KU( mul('M'^~pw, z^inv(~y)) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( z^inv(~y) ) @ #vk.7 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.11 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( mul(z^inv(~y), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( z^inv(~y) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( mul(x, 'M'^~pw) ) @ #vk.5 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( mul('M'^~pw, x) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.1 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( mul(x^x.1, 'M'^~pw) ) @ #vk.5 ) )
                    case A_1
                    MIRRORED
                  next
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( mul('M'^~pw, x^x.1) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( 'g'^~x.2 ) @ #vk.8 ) )
                        case A_1
                        by step( contradiction /* cyclic */ )
                      next
                        case c_exp
                        by step( solve( !KU( ~x.2 ) @ #vk.10 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( mul(x^inv((~y*x.1)), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.6 ) )
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( mul(x^(x.1*inv(~y)), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.6 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( mul('M'^~pw, x^inv((~y*x.1))) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( 'M'^~pw ) @ #vk.6 ) )
                      case A_1
                      step( solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 ) )
                        case c_exp
                        by step( solve( !KU( ~y ) @ #vk.12 ) )
                      qed
                    next
                      case c_exp
                      by step( solve( !KU( ~pw ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case split_case_11
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv(~y))) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.9 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.15 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    qed
                  qed
                next
                  case split_case_12
                  step( solve( !KU( mul(x^(x.1*inv((~y*x.2))), 'M'^~pw) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.6 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    qed
                  qed
                next
                  case split_case_13
                  step( solve( !KU( mul('M'^~pw, x^(x.1*inv((~y*x.2)))) ) @ #vk.5 ) )
                    case c_mul
                    step( solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 ) )
                      case A_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.11 ) )
                    next
                      case A_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    next
                      case A_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.10 ) )
                    next
                      case A_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.12 ) )
                    next
                      case B_1_case_1
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_2
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case B_1_case_3
                      by step( solve( !KU( ~y ) @ #vk.14 ) )
                    next
                      case B_1_case_4
                      by step( solve( !KU( ~y ) @ #vk.16 ) )
                    next
                      case c_exp
                      by step( solve( !KU( ~y ) @ #vk.13 ) )
                    qed
                  qed
                qed
              next
                case c_mul
                step( solve( !KU( 'g'^~y ) @ #vk.6 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.7 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.11 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.13 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Password_guess
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_rc
        step( solve( !Own( pw ) ▶₀ #vr ) )
          case Password_init
          by step( solve( Finish( ) ▶₂ #vr ) )
        qed
      qed
    qed
  qed
next
  case Rule_Password_guess
  backward-search
    case LHS
    step( simplify )
    step( solve( !Own( pw ) ▶₀ #i ) )
      case Password_init
      by step( solve( Finish( ) ▶₂ #i ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Own( pw ) ▶₀ #i ) )
      case Password_init
      by step( solve( Finish( ) ▶₂ #i ) )
    qed
  qed
next
  case Rule_Password_init
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Verif
  backward-search
    case LHS
    step( simplify )
    step( solve( SK_A( SK_A ) ▶₀ #i ) )
      case A_2
      step( solve( SK_B( Hash($A, $B, mul('g'^~x, 'M'^~pw), C2, z) ) ▶₁ #i ) )
        case B_1
        step( solve( !KU( $B ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( $B ) ▶₀ #vk.2 ) )
            case A_1
            step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                case d_0_invmul_case_1
                step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_invmul_case_2
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case B_1
            step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                case d_0_invmul_case_1
                step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_invmul_case_2
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case Password_guess
            step( solve( !Own( t ) ▶₀ #vr.4 ) )
              case Password_init
              by step( contradiction /* impossible chain */ )
            qed
          qed
        next
          case pub
          step( solve( !KU( $A ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.3 ) )
              case A_1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              step( solve( !Own( t ) ▶₀ #vr.4 ) )
                case Password_init
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case pub
            step( solve( !KU( mul('g'^~x, 'M'^~pw) ) @ #vk.5 ) )
              case A_1
              step( solve( !KU( mul('g'^~y, 'N'^~pw) ) @ #vk.5 ) )
                case B_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'g'^~y ) @ #vk.6 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.7 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.11 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.13 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case c_mul
              step( solve( !KU( 'g'^~x ) @ #vk.6 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.8 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.9 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.9 ) )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( SK_A( SK_A ) ▶₀ #i ) )
      case A_2
      step( solve( SK_B( Hash($A, $B, mul('g'^~x, 'M'^~pw), C2, z) ) ▶₁ #i ) )
        case B_1
        step( solve( !KU( $B ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( $B ) ▶₀ #vk.2 ) )
            case A_1
            step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                case d_0_invmul_case_1
                step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_invmul_case_2
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case B_1
            step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                case d_0_invmul_case_1
                step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                  case Password_init
                  by step( contradiction /* impossible chain */ )
                qed
              next
                case d_0_invmul_case_2
                by step( contradiction /* impossible chain */ )
              qed
            qed
          next
            case Password_guess
            by step( contradiction /* impossible chain */ )
          qed
        next
          case pub
          step( solve( !KU( $A ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( $A ) ▶₀ #vk.3 ) )
              case A_1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case B_1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  case d_0_invmul_case_1
                  step( solve( !Own( pw.1 ) ▶₀ #vr.4 ) )
                    case Password_init
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case d_0_invmul_case_2
                  by step( contradiction /* impossible chain */ )
                qed
              qed
            next
              case Password_guess
              by step( contradiction /* impossible chain */ )
            qed
          next
            case pub
            step( solve( !KU( mul('g'^~x, 'M'^~pw) ) @ #vk.5 ) )
              case A_1
              step( solve( !KU( mul('g'^~y, 'N'^~pw) ) @ #vk.5 ) )
                case B_1
                MIRRORED
              next
                case c_mul
                step( solve( !KU( 'g'^~y ) @ #vk.6 ) )
                  case B_1
                  step( solve( !KU( 'N'^~pw ) @ #vk.7 ) )
                    case B_1
                    step( solve( !KU( 'g'^~y.1 ) @ #vk.11 ) )
                      case B_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_exp
                      by step( solve( !KU( ~y.1 ) @ #vk.13 ) )
                    qed
                  next
                    case c_exp
                    by step( solve( !KU( ~pw ) @ #vk.9 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~y ) @ #vk.9 ) )
                qed
              qed
            next
              case c_mul
              step( solve( !KU( 'g'^~x ) @ #vk.6 ) )
                case A_1
                step( solve( !KU( 'M'^~pw ) @ #vk.7 ) )
                  case A_1
                  step( solve( !KU( 'g'^~x.1 ) @ #vk.8 ) )
                    case A_1
                    by step( contradiction /* cyclic */ )
                  next
                    case c_exp
                    by step( solve( !KU( ~x.1 ) @ #vk.10 ) )
                  qed
                next
                  case c_exp
                  by step( solve( !KU( ~pw ) @ #vk.9 ) )
                qed
              next
                case c_exp
                by step( solve( !KU( ~x ) @ #vk.9 ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

end